services:
    web:
        build:
            dockerfile: nginx/Dockerfile
        ports: 
          - "80:80"
          - "443:443"
        restart: unless-stopped
        tty: true
        volumes: 
          - ./public:/var/www/html/public
          - letsencrypt:/etc/letsencrypt
          - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
        networks:
          vlan:
            ipv4_address: 192.168.1.100
        depends_on:
          - app        
    app:
        build:
            dockerfile: Dockerfile
        volumes:
          - ./public:/var/www/html/public
          - ./php/php.ini:/usr/local/etc/php/php.ini
        networks:
          vlan:
            ipv4_address: 192.168.1.101
        restart: unless-stopped
        tty: true
        depends_on:
          - db

    # horizon:
    #     build:
    #         dockerfile: Dockerfile
    #     volumes:
    #       - ./:/var/www/html
    #       - ./php/php.ini:/usr/local/etc/php/php.ini
    #     networks:
    #       vlan:
    #         ipv4_address: 192.168.1.104
    #     restart: unless-stopped
    #     tty: true
    #     depends_on:
    #       - db
    #       - redis
    #     command: php artisan horizon
       
    db:
        image: mysql:8.0
        volumes: 
          - mysqldata:/var/lib/mysql
        ports:
          - "3308:3306"
        networks:
          vlan:
            ipv4_address: 192.168.1.102
        restart: unless-stopped
        command: --max_allowed_packet=325058560
        container_name: db
        environment:
            MYSQL_ROOT_PASSWORD: 12345678
            MYSQL_USER: user
            MYSQL_PASSWORD: password
            MYSQL_DATABASE: cbt
    
    phpmyadmin:
        image: phpmyadmin
        restart: always
        ports:
          - 5147:80
        environment:
            PMA_HOST: db
            MYSQL_ROOT_PASSWORD: 12345678
            UPLOAD_LIMIT: 100000000
        depends_on:
          - db
        networks:
          vlan:
            ipv4_address: 192.168.1.103

    redis:
        image: redis:latest
        container_name: redis
        restart: always
        volumes:
          - redis_volume:/data
        ports:
          - 6379:6379
        networks:
          vlan:
            ipv4_address: 192.168.1.105

    redis_insight: 
        image: redislabs/redisinsight:latest
        container_name: redis_insight
        restart: always
        volumes:
          - redis_insight_volume:/db
        ports:
          - 8001:8001
        networks:
          vlan:
            ipv4_address: 192.168.1.106

volumes:
    mysqldata:
    letsencrypt:
    redis_insight_volume:
    redis_volume:

networks:
  vlan:
    external: true
    name: vlan



    docker run -v ./step:/home/step \
    --name=step-server \
    -p 9000:9000 \
    -e "DOCKER_STEPCA_INIT_NAME=Smallstep" \
    -e "DOCKER_STEPCA_INIT_DNS_NAMES=step-server,$(hostname -f)" \
    -e "DOCKER_STEPCA_INIT_REMOTE_MANAGEMENT=true" \
    smallstep/step-ca

CA_FINGERPRINT=$(docker run -v ./step:/home/step smallstep/step-ca step certificate fingerprint certs/root_ca.crt)

step ca bootstrap --ca-url https://localhost:9000 --fingerprint $CA_FINGERPRINT --install

CA_FINGERPRINT=$(docker run -v ./step:/home/step smallstep/step-ca step certificate fingerprint certs/root_ca.crt)

    REQUESTS_CA_BUNDLE=/etc/nginx/certs/root_ca.crt certbot certonly --nginx -d localhost --server https://step-server:9000/acme/acme/directory
certbot --nginx -d localhost --server https://ca_server:9000/acme/acme/directory